/**
 * VERIFICADOR DE IP E REDE
 * ======================
 * 
 * Software acad√™mico para an√°lise de redes de computadores
 * Verifica se dois endere√ßos IP est√£o na mesma rede com base na m√°scara CIDR
 * 
 * @author Anita, Guilherme, Karina e L√≠via
 * @course Redes de Computadores - IESB
 * @version 1.0
 * @date 2025
 * 
 * Funcionalidades:
 * - Gera√ß√£o de IP aleat√≥rio para origem
 * - Valida√ß√£o em tempo real de entradas
 * - Convers√£o CIDR para m√°scara decimal
 * - Verifica√ß√£o de pertencimento √† mesma rede
 * - Interface responsiva com feedback visual
 */

// ===================== Configura√ß√£o =====================

/** @type {string} IP de origem padr√£o (pode ser alterado dinamicamente) */
let ipOrigem = "192.168.15.4";

/** @type {number} Valor m√≠nimo permitido para CIDR */
const CIDR_MIN = 1;

/** @type {number} Valor m√°ximo permitido para CIDR */
const CIDR_MAX = 32;

// ===================== Gera√ß√£o de IP Aleat√≥rio =====================

/**
 * Gera um octeto aleat√≥rio v√°lido para endere√ßo IPv4
 * @returns {number} N√∫mero entre 0 e 255
 * @example
 * const octeto = gerarOcteto(); // 192
 */
function gerarOcteto() {
    return Math.floor(Math.random() * 256);
}

/**
 * Gera um endere√ßo IP aleat√≥rio v√°lido, evitando ranges especiais
 * Evita: localhost (127.x), multicast (224.x-240.x), e endere√ßos .0/.255
 * @returns {string} Endere√ßo IP no formato "xxx.xxx.xxx.xxx"
 * @example
 * const ip = gerarIpAleatorio(); // "192.168.1.100"
 */
function gerarIpAleatorio() {
    let ip;
    do {
        // Primeiro octeto: 1-223 (evita ranges especiais)
        const octeto1 = Math.floor(Math.random() * 223) + 1;
        const octeto2 = gerarOcteto();
        const octeto3 = gerarOcteto();
        // √öltimo octeto: 1-254 (evita .0 e .255)
        const octeto4 = Math.floor(Math.random() * 254) + 1;
        ip = `${octeto1}.${octeto2}.${octeto3}.${octeto4}`;
    } while (ip.startsWith('127.') || ip.startsWith('224.') || ip.startsWith('240.'));
    
    return ip;
}

/**
 * Atualiza o IP de origem na interface e limpa resultados anteriores
 * @param {string} novoIp - Novo endere√ßo IP de origem
 * @example
 * atualizarIpOrigem("10.0.0.1");
 */
function atualizarIpOrigem(novoIp) {
    ipOrigem = novoIp;
    const lbl = document.getElementById("ipOrigem");
    if (lbl) lbl.textContent = `IP de Origem: ${ipOrigem}`;
    
    // Limpa resultados pois mudou o contexto
    limparResultados();
}

// ===================== Utilit√°rios de UI =====================

/**
 * Exibe mensagem de ajuda abaixo de um elemento input
 * @param {string} id - ID do elemento de ajuda (formato: inputId + "-help")
 * @param {string} [msg=""] - Mensagem a exibir (vazio para limpar)
 * @param {string} [color="red"] - Cor do texto da mensagem
 * @example
 * setHelp("ip-help", "Formato inv√°lido", "red");
 * setHelp("mask-help", ""); // limpa a mensagem
 */
function setHelp(id, msg = "", color = "red") {
    const el = document.getElementById(id);
    if (!el) return;
    el.textContent = msg;
    el.style.color = msg ? color : "";
}

/**
 * Aplica estilo visual de erro a um elemento input
 * @param {HTMLElement} inputEl - Elemento input a ser marcado
 * @param {boolean} isInvalid - Se true, aplica estilo de erro; se false, remove
 * @example
 * const input = document.getElementById("ip");
 * setInvalid(input, true); // marca como inv√°lido
 * setInvalid(input, false); // remove marca√ß√£o
 */
function setInvalid(inputEl, isInvalid) {
    if (!inputEl) return;
    inputEl.classList.toggle("input-error", !!isInvalid);
    inputEl.setAttribute("aria-invalid", isInvalid ? "true" : "false");
}

/**
 * Define texto e cor de um elemento de resultado
 * @param {string} id - ID do elemento
 * @param {string} texto - Texto a exibir
 * @param {string} [color=""] - Cor do texto (vazio para padr√£o)
 * @example
 * setTexto("mask-decimal", "255.255.255.0", "#059669");
 */
function setTexto(id, texto, color = "") {
    const el = document.getElementById(id);
    if (!el) return;
    el.textContent = texto;
    el.style.color = color || "";
}

/**
 * Limpa todos os resultados e estados de valida√ß√£o da interface
 * Remove mensagens de erro, resultados anteriores e estilos visuais
 * @example
 * limparResultados(); // Limpa toda a interface
 */
function limparResultados() {
    setTexto("mask-decimal", "---");
    setTexto("same-network", "---");
    setHelp("mask-help", "");
    setHelp("ip-help", "");
    setInvalid(document.getElementById("mask"), false);
    setInvalid(document.getElementById("ip"), false);
}

/**
 * Exibe os resultados da verifica√ß√£o de rede na interface
 * @param {Object} resultado - Objeto com os resultados da verifica√ß√£o
 * @param {string} resultado.mascaraDecimal - M√°scara em formato decimal
 * @param {boolean} resultado.mesmaRede - Se os IPs est√£o na mesma rede
 * @param {string} ipDestino - IP de destino para exibi√ß√£o
 * @example
 * const resultado = {mascaraDecimal: "255.255.255.0", mesmaRede: true};
 * mostrarResultados(resultado, "192.168.1.100");
 */
function mostrarResultados({ mascaraDecimal, mesmaRede }, ipDestino) {
    setHelp("mask-help", "");
    setHelp("ip-help", "");
    setInvalid(document.getElementById("mask"), false);
    setInvalid(document.getElementById("ip"), false);

    setTexto("mask-decimal", mascaraDecimal, "#059669"); 
    setTexto(
        "same-network",
        mesmaRede
        ? `O IP ${ipDestino} EST√Å na mesma rede que ${ipOrigem}`
        : `O IP ${ipDestino} N√ÉO est√° na mesma rede que ${ipOrigem}`,
        mesmaRede ? "#059669" : "#dc2626"
    );
}

// ===================== Valida√ß√µes & L√≥gica =====================

/**
 * Valida e converte entrada CIDR para n√∫mero inteiro
 * Remove espa√ßos e barras, valida formato e range
 * @param {string|number} cidr - Valor CIDR a ser validado (pode incluir "/")
 * @returns {{valor: number, erro: string|null}} Objeto com valor num√©rico e poss√≠vel erro
 * @example
 * limparEConverterCidr("24")     // {valor: 24, erro: null}
 * limparEConverterCidr("/16")    // {valor: 16, erro: null}
 * limparEConverterCidr("abc")    // {valor: NaN, erro: "M√°scara deve conter apenas n√∫meros."}
 * limparEConverterCidr("33")     // {valor: NaN, erro: "M√°scara deve ser menor ou igual a 32."}
 */
function limparEConverterCidr(cidr) {
    if (cidr === null || cidr === undefined) return { valor: NaN, erro: "Informe a m√°scara CIDR." };

    const cidrLimpo = String(cidr).trim().replace(/^\s*\/?/, "");
    if (cidrLimpo === "") return { valor: NaN, erro: "Informe a m√°scara CIDR." };

    if (!/^\d+$/.test(cidrLimpo)) {
        return { valor: NaN, erro: "M√°scara deve conter apenas n√∫meros." };
    }
    
    const cidrNumero = Number(cidrLimpo);
    
    if (isNaN(cidrNumero)) {
        return { valor: NaN, erro: "M√°scara deve ser um n√∫mero." };
    }
    
    if (!Number.isInteger(cidrNumero)) {
        return { valor: NaN, erro: "M√°scara deve ser um n√∫mero inteiro." };
    }
    
    if (cidrNumero < CIDR_MIN) {
        return { valor: NaN, erro: `M√°scara deve ser maior ou igual a ${CIDR_MIN}.` };
    }
    
    if (cidrNumero > CIDR_MAX) {
        return { valor: NaN, erro: `M√°scara deve ser menor ou igual a ${CIDR_MAX}.` };
    }

    return { valor: cidrNumero, erro: null };
}

/**
 * Converte nota√ß√£o CIDR em m√°scara de sub-rede decimal
 * Algoritmo: Cria string bin√°ria com CIDR 1s seguidos de 0s, depois converte para decimal
 * @param {number} cidr - N√∫mero CIDR entre 1 e 32
 * @returns {string} M√°scara no formato "xxx.xxx.xxx.xxx"
 * @throws {Error} Se CIDR estiver fora do range v√°lido
 * @example
 * cidrParaDecimal(24)  // "255.255.255.0"
 * cidrParaDecimal(16)  // "255.255.0.0"
 * cidrParaDecimal(8)   // "255.0.0.0"
 */
function cidrParaDecimal(cidr) {
    if (!Number.isInteger(cidr) || cidr < CIDR_MIN || cidr > CIDR_MAX) {
        throw new Error(`CIDR inv√°lido. Use um inteiro entre ${CIDR_MIN} e ${CIDR_MAX}.`);
    }

    const mascaraBin = "1".repeat(cidr).padEnd(32, "0");
    const octetos = mascaraBin.match(/.{1,8}/g);
    return octetos.map(octeto => parseInt(octeto, 2)).join(".");
}

/**
 * Converte endere√ßo IP string em n√∫mero inteiro de 32 bits
 * Algoritmo: Divide em octetos, valida cada um (0-255), e usa shift left + soma
 * @param {string} ip - Endere√ßo IP no formato "xxx.xxx.xxx.xxx"
 * @returns {number} Representa√ß√£o num√©rica do IP (0 a 4.294.967.295)
 * @throws {Error} Se IP for inv√°lido, mal formatado ou octetos fora do range
 * @example
 * ipParaInteiro("192.168.1.1")     // 3232235777
 * ipParaInteiro("10.0.0.1")        // 167772161
 * ipParaInteiro("255.255.255.255") // 4294967295
 */
function ipParaInteiro(ip) {
    if (typeof ip !== "string") throw new Error("IP inv√°lido: valor n√£o √© texto.");
    const ipTrim = ip.trim();
    if (!ipTrim) throw new Error("Informe o IP de destino.");

    const octetos = ipTrim.split(".");
    if (octetos.length !== 4) throw new Error(`IP inv√°lido: ${ip}`);

    let acumulador = 0;
    for (const octeto of octetos) {
        if (!/^\d+$/.test(octeto)) throw new Error(`Octeto inv√°lido`);
        const valorOcteto = parseInt(octeto, 10);
        if (valorOcteto < 0 || valorOcteto > 255) throw new Error(`Octeto fora do intervalo (0‚Äì255): ${octeto}`);
        acumulador = (acumulador << 8) + valorOcteto;
    }
    return acumulador >>> 0;
}

/**
 * üéØ FUN√á√ÉO PRINCIPAL: Verifica se dois IPs est√£o na mesma rede
 * 
 * Algoritmo de Verifica√ß√£o de Rede:
 * 1. Valida e converte CIDR de entrada
 * 2. Converte CIDR para m√°scara decimal (ex: 24 ‚Üí 255.255.255.0)
 * 3. Converte IPs (origem e destino) para representa√ß√£o inteira de 32 bits
 * 4. Converte m√°scara decimal para inteiro
 * 5. Aplica opera√ß√£o AND bit a bit nos IPs com a m√°scara
 * 6. Compara os endere√ßos de rede resultantes
 * 
 * @param {string} ipDestino - IP de destino no formato "xxx.xxx.xxx.xxx"
 * @param {string|number} cidrEntrada - Nota√ß√£o CIDR (1-32), aceita string ou n√∫mero
 * @returns {{ipOrigem: string, mascaraDecimal: string, mesmaRede: boolean}} Resultado completo da verifica√ß√£o
 * @throws {Error} Se CIDR ou IP de destino forem inv√°lidos
 * 
 * @example
 * // IPs na mesma rede /24
 * verificarRede("192.168.1.100", 24)
 * // Retorna: {
 * //   ipOrigem: "192.168.1.50",
 * //   mascaraDecimal: "255.255.255.0",
 * //   mesmaRede: true
 * // }
 * 
 * @example
 * // IPs em redes diferentes
 * verificarRede("10.0.0.1", "24")
 * // Retorna: {
 * //   ipOrigem: "192.168.1.50",
 * //   mascaraDecimal: "255.255.255.0",
 * //   mesmaRede: false
 * // }
 */
function verificarRede(ipDestino, cidrEntrada) {
    const resultadoCidr = typeof cidrEntrada === "number" ? { valor: cidrEntrada, erro: null } : limparEConverterCidr(cidrEntrada);
    
    if (Number.isNaN(resultadoCidr.valor)) {
        throw new Error(resultadoCidr.erro || "CIDR inv√°lido.");
    }
    
    const cidrNumero = resultadoCidr.valor;
    const mascaraDecimal = cidrParaDecimal(cidrNumero);
    const ipDestinoInt = ipParaInteiro(ipDestino);
    const ipOrigemInt = ipParaInteiro(ipOrigem);
    const mascaraInt = ipParaInteiro(mascaraDecimal);

    const redeDestino = ipDestinoInt & mascaraInt;
    const redeOrigem = ipOrigemInt & mascaraInt;

    return {
        ipOrigem,
        mascaraDecimal,
        mesmaRede: redeDestino === redeOrigem
    };
}
 
// ===================== Integra√ß√£o com o HTML =====================

/**
 * üéØ CONTROLADOR PRINCIPAL: Executa valida√ß√£o e c√°lculo quando usu√°rio clica "Verificar"
 * 
 * Fluxo de Execu√ß√£o:
 * 1. Obt√©m valores dos campos de entrada (IP e CIDR)
 * 2. Limpa valida√ß√µes anteriores
 * 3. Valida CIDR em tempo real
 * 4. Valida formato do IP de destino
 * 5. Se v√°lidos, executa verifica√ß√£o de rede
 * 6. Exibe resultados ou erros na interface
 * 
 * @example
 * // Chamada autom√°tica pelo evento de clique do bot√£o "Verificar"
 * calcular();
 */
function calcular() {
    const ipInput = document.getElementById("ip");
    const maskInput = document.getElementById("mask");

    const ipDestino = ipInput?.value ?? "";
    const cidrRaw = maskInput?.value ?? "";

    setHelp("mask-help", "");
    setHelp("ip-help", "");
    setInvalid(maskInput, false);
    setInvalid(ipInput, false);

    const resultadoCidr = limparEConverterCidr(cidrRaw);
    if (Number.isNaN(resultadoCidr.valor)) {
        const msg = resultadoCidr.erro || "CIDR inv√°lido.";
        setHelp("mask-help", msg);
        setInvalid(maskInput, true);

        return;
    }
    
    const cidr = resultadoCidr.valor;

    // valida√ß√£o do IP (helptext + visual)
    try {
        ipParaInteiro(ipDestino);
    } catch (e) {
        const msg = e.message || "IP inv√°lido.";
        setHelp("ip-help", msg);
        setInvalid(ipInput, true);
        return;
    }

    try {
        const resultado = verificarRede(ipDestino, cidr);
        mostrarResultados(resultado, ipDestino.trim());
    } catch (e) {
        // fallback geral (n√£o deve ocorrer com as valida√ß√µes acima)
        setHelp("ip-help", e.message || "Erro desconhecido.");
        setInvalid(ipInput, true);
    }
}

// ===================== INICIALIZA√á√ÉO DA APLICA√á√ÉO =====================

/**
 * üöÄ INICIALIZADOR: Configura todos os event listeners quando o DOM est√° pronto
 * 
 * Configura√ß√µes realizadas:
 * - Exibe IP de origem inicial
 * - Configura clique do bot√£o "Verificar"
 * - Configura gera√ß√£o de IP aleat√≥rio com feedback visual
 * - Configura valida√ß√£o em tempo real dos campos
 * - Configura tecla Enter para executar verifica√ß√£o
 * - Limpa interface inicial
 */
document.addEventListener("DOMContentLoaded", () => {
    const lbl = document.getElementById("ipOrigem");
    if (lbl) lbl.textContent = `IP de Origem: ${ipOrigem}`;

    const btn = document.getElementById("calculate");
    if (btn) btn.addEventListener("click", calcular);
    
    // Bot√£o para gerar IP aleat√≥rio
    const generateBtn = document.getElementById("generateIp");
    if (generateBtn) {
        generateBtn.addEventListener("click", () => {
            const novoIp = gerarIpAleatorio();
            atualizarIpOrigem(novoIp);
            
            generateBtn.textContent = "üîÑ Gerando...";
            generateBtn.disabled = true;
            
            setTimeout(() => {
                generateBtn.textContent = "üé≤ Gerar";
                generateBtn.disabled = false;
            }, 300);
        });
    }

    const ipInput = document.getElementById("ip");
    const maskInput = document.getElementById("mask");
    
    if (maskInput) {
        maskInput.addEventListener("input", () => {
            const cidrRaw = maskInput.value;
            
            // Limpa valida√ß√µes anteriores
            setHelp("mask-help", "");
            setInvalid(maskInput, false);
            
            // Se o campo n√£o est√° vazio, valida
            if (cidrRaw.trim() !== "") {
                const resultadoCidr = limparEConverterCidr(cidrRaw);
                if (Number.isNaN(resultadoCidr.valor)) {
                    const msg = resultadoCidr.erro || "CIDR inv√°lido.";
                    setHelp("mask-help", msg);
                    setInvalid(maskInput, true);
                }
            }
        });
        
        // Valida√ß√£o quando o campo perde o foco
        maskInput.addEventListener("blur", () => {
            const cidrRaw = maskInput.value;
            
            if (cidrRaw.trim() !== "") {
                const resultadoCidr = limparEConverterCidr(cidrRaw);
                if (Number.isNaN(resultadoCidr.valor)) {
                    const msg = resultadoCidr.erro || "CIDR inv√°lido.";
                    setHelp("mask-help", msg);
                    setInvalid(maskInput, true);
                }
            }
        });
    }
    
    // Valida√ß√£o em tempo real para o campo IP
    if (ipInput) {
        ipInput.addEventListener("input", () => {
            const ipDestino = ipInput.value;
            
            // Limpa valida√ß√µes anteriores
            setHelp("ip-help", "");
            setInvalid(ipInput, false);
            
            // Se o campo n√£o est√° vazio, valida
            if (ipDestino.trim() !== "") {
                try {
                    ipParaInteiro(ipDestino);
                } catch (e) {
                    const msg = e.message || "IP inv√°lido.";
                    setHelp("ip-help", msg);
                    setInvalid(ipInput, true);
                }
            }
        });
        
        // Valida√ß√£o quando o campo perde o foco
        ipInput.addEventListener("blur", () => {
            const ipDestino = ipInput.value;
            
            if (ipDestino.trim() !== "") {
                try {
                    ipParaInteiro(ipDestino);
                } catch (e) {
                    const msg = e.message || "IP inv√°lido.";
                    setHelp("ip-help", msg);
                    setInvalid(ipInput, true);
                }
            }
        });
    }
    
    // Event listeners para Enter nos campos
    [ipInput, maskInput].forEach(el => {
        if (!el) return;
        el.addEventListener("keydown", (ev) => {
            if (ev.key === "Enter") {
                ev.preventDefault();
                calcular();
            }
        });
    });

    limparResultados();
});